package characterCreation

import (
	"bufio"
	"dnd-agent/pkg/domain"
	unitDefintion "dnd-agent/pkg/unit-defintion"
	"fmt"
	lua "github.com/yuin/gopher-lua"
	"os"
	"strconv"
	"strings"
)

func collectInputFromChoices(choices []domain.Choice) map[string]interface{} {
	reader := bufio.NewReader(os.Stdin)
	results := make(map[string]interface{})

	for _, ch := range choices {
		for {
			switch ch.Type {
			case "string":
				fmt.Printf("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '%s' (string): ", ch.Name)
				input, _ := reader.ReadString('\n')
				results[ch.Name] = strings.TrimSpace(input)
				break

			case "int":
				fmt.Printf("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '%s' (int): ", ch.Name)
				input, _ := reader.ReadString('\n')
				input = strings.TrimSpace(input)
				val, err := strconv.Atoi(input)
				if err != nil {
					fmt.Println("‚ùå –û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
					continue
				}
				results[ch.Name] = val
				break

			case "select":
				if len(ch.Options) == 0 {
					fmt.Printf("‚ö†Ô∏è  '%s' –∏–º–µ–µ—Ç —Ç–∏–ø 'select', –Ω–æ –±–µ–∑ options ‚Äî –ø—Ä–æ–ø—É—Å–∫.\n", ch.Name)
					break
				}

				fmt.Printf("\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '%s':\n", ch.Name)
				for i, opt := range ch.Options {
					fmt.Printf("  %d) %s\n", i+1, opt)
				}

				var choiceIndex int
				for {
					fmt.Printf("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-%d): ", len(ch.Options))
					input, _ := reader.ReadString('\n')
					input = strings.TrimSpace(input)
					num, err := strconv.Atoi(input)
					if err != nil || num < 1 || num > len(ch.Options) {
						fmt.Println("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞.")
						continue
					}
					choiceIndex = num - 1
					break
				}

				results[ch.Name] = ch.Options[choiceIndex]
				break

			default:
				fmt.Printf("‚ö†Ô∏è  –¢–∏–ø '%s' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º '%s'.\n", ch.Type, ch.Name)
				break
			}

			break // –≤—ã—Ö–æ–¥–∏–º –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –≤—Å—ë —É—Å–ø–µ—à–Ω–æ
		}
	}

	return results
}

func getTemplate(template string) string {
	data, err := os.ReadFile("lua/unit-definition/" + template + ".lua")
	if err != nil {
		panic(err)
	}
	return string(data)
}

func ScanCharacter() *domain.Unit {
	L := lua.NewState()

	attrTable := L.NewTable()
	inventoryTable := L.NewTable()

	//TODO: –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ command –∏ handlers
	templates := []string{
		"base/base",
		"abilities/abilities",
		"races/human",
		"backgrounds/outlander",
		"classes/fighter-1",
		"character/character",
	}

	var attributes interface{}
	var inventory interface{}
	var err error

	for _, template := range templates {
		attributes, inventory, err = unitDefintion.ProcessUnitDefinition(
			L,
			getTemplate(template),
			attrTable,
			inventoryTable,
			collectInputFromChoices,
		)

		if err != nil {
			panic(err)
		}
	}

	// üß± –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Unit
	return &domain.Unit{
		Attributes: attributes,
		Inventory:  inventory,
		Equipment:  nil,
		States:     nil,
		ID:         0,
		X:          0,
		Y:          0,
		ZoneId:     nil,
		Owner:      "",
	}
}
