package worldzone

import "container/list"

// FindNearestBFS –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–π —è—á–µ–π–∫–∏ –æ—Ç (x, y),
// —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–µ–π –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–∏–∫–∞—Ç—É.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –¥–æ –Ω–µ—ë –≤ –≤–∏–¥–µ []Cell.
func FindNearestBFS(level *Level, x, y int, predicate func(Cell) bool) []Cell {
	grid := createMap(level)
	w := len(grid)
	if w == 0 {
		return nil
	}

	if isOutOfBounds(x, y, grid) || !IsPathible(grid[x][y]) {
		return nil
	}

	dirs := [8][2]int{
		{1, 0}, {-1, 0}, {0, 1}, {0, -1},
		{1, 1}, {1, -1}, {-1, 1}, {-1, -1},
	}

	prev := make(map[*Cell]*Cell)

	start := &grid[x][y]
	prev[start] = start // ‚úÖ –∑–∞–∫–æ–ª—å—Ü–µ–≤–∞–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–µ—Ç–∫—É
	queue := list.New()
	queue.PushBack(start)

	for queue.Len() > 0 {
		elem := queue.Front()
		queue.Remove(elem)
		cell := elem.Value.(*Cell)

		// üü¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–∏–∫–∞—Ç ‚Äî –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å
		if predicate(*cell) {
			return reconstructPathCells(prev, start, cell)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π (8 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π)
		for _, d := range dirs {
			nx, ny := cell.X+d[0], cell.Y+d[1]
			if isOutOfBounds(nx, ny, grid) {
				continue
			}
			next := &grid[nx][ny]

			// –µ—Å–ª–∏ —É–∂–µ –±—ã–ª –ø–æ—Å–µ—â—ë–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			if _, seen := prev[next]; seen {
				continue
			}
			if !IsPathible(*next) {
				continue
			}

			prev[next] = cell
			queue.PushBack(next)
		}
	}

	// üö´ –ù–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —è—á–µ–π–∫—É
	return nil
}

// reconstructPathCells –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—É—Ç—å –∏–∑ prev-—Ç–∞–±–ª–∏—Ü—ã.
func reconstructPathCells(prev map[*Cell]*Cell, start, goal *Cell) []Cell {
	path := []Cell{}
	cur := goal
	for {
		path = append(path, *cur)
		if cur == start {
			break
		}
		cur = prev[cur]
		if cur == nil {
			break // –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö prev
		}
	}

	// –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—É—Ç—å (–æ—Ç —Å—Ç–∞—Ä—Ç–∞ –∫ —Ü–µ–ª–∏)
	for i, j := 0, len(path)-1; i < j; i, j = i+1, j-1 {
		path[i], path[j] = path[j], path[i]
	}
	return path
}
